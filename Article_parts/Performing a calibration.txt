\section{Performing a 3D calibration}

It is necessary to perform a multi-camera calibration prior to tracking objects within the object space. The following items are necessary to perform the calibration. First (1), a rigid, accurately machined calibration target including a minimum of XX visually identifiable calibration markers who's center positions are known within the 3D object-space reference frame. Preferably, the calibration markers should be spherical and of a color strongly contrasting that of background objects and any connective elements used to make the calibration target (ex., white markers on a black background). The calibration target should designed such that the hull formed by the calibration markers encloses the volume in which tracking will be performed. For example, a calibration apparatus consisting of eight spheres, one in each corner, and connected by rods to form a cube, would work well to calibrate the volume contained within the cube. Tracking objects appearing outside of the hull may lead to greater uncertainty in the 3D reconstruction (does it really? maybe test it). Second (2), a calibration image file (*.jpg) taken from each view of the calibration target. Each calibration image must contain at least 8 common calibration markers appearing in all views. The calibration images must be of identical resolution to the video format that will be used for object tracking. A good approach to obtain valid calibration images is to extract still frames from short videos of each view (the open-source video editing software package ffmpeg provides such functionality). Third (3), a comma-separated text file (*.csv) with rows containing three columns respectively containing the x, y and z coordinates for each of the calibration markers common to each view. The first row corresponds to the first calibration marker, the second to the second calibration marker, et. cetera. Fourth (4), the calibration module of pyTracker3D successfully installed. 

A valid calibration table is the only input necessary to perform a 3D calibration. A valid calibration table consists of a minimum of 7 columns and as many rows as there are calibration markers common across views. In the table, from left to right, the first three columns must each contain respectively the x, y and z coordinates of each of the calibration markers visible in the object-space, the next two columns contain respectively the x and y pixel coordinates of the centroids (geometric-centers) of the 2D projections of the 3D calibration markers as they appear in the first view, the last two columns contain the x and y pixel coordinates of the centroids of the calibration markers in the second view. Throughout pyTracker3D the pixel coordinate origin is always the top-left corner of the image and the x pixel coordinates increase towards the right and the y pixel coordinates increase downwards. Two additional columns, one for each the x and y pixel coordinates of the calibration marker 2D projection centroids are required for each additional view. The calibration module of pyTracker3D can be used to define and populate a new calibration table, or optionally, a calibration table populated through other means can also be loaded. The calibration module of pyTracker3D provides a convenient means to populate a valid table. Instructions for the calibration module's use are described below.

A new calibration table can be populated in pyTracker3D by performing the following XX steps: (1) ensure the "populate new calibration table" radio button is selected, (2) specify the number of working views, (3) load the comma-separated text file to populate the first three columns of the calibration table, (4) load the first view of the calibration target, (5) populate the calibration table with the x and y pixel coordinates for each marker by double-clicking approximately on the center of each calibration marker appearing in the image viewer window (proceed in ascending order from the 1st to the nth marker), a movable red calibration dot will appear, (6) once all points have been identified by a dot, select the image name with the suffix '_binary' appended to it in the 'Centroid detection' dialog, adjust the binary threshold until the calibration markers are clearly identifiable as completely black or completely white surfaces (color will depend on wether you have light markers against a dark background, or dark markers against a light background), once satisfied press "correct to centroids", markers that have successfully 'snapped' to the calibration marker centroids will turn green, (6) assess the accuracy of the snapped locations, inaccurate snaps are likely due to poor contrast between the calibration marker and its surroundings (adjust the binary threshold and try again) repeat steps 2 to 6 for each view. Finally, once the calibration table is correctly populated, (7) press "Perform 3D calibration" and visualize the populated calibration coefficient table. Optionally, (8) use the functionality available within pytracker3D to evaluate the accuracy of the calibration at predicting the object-space coordinates of a set of pixel coordinates appearing in each view. If satisfied with the calibration, click "Save calibration" for subsequent use in the pytracker3D tracking module or for other purposes.

To load a previously populated calibration table, select the "Import populated calibration table" radio-button and specify the correct number of views needed to perform the calibration. After, use the "Import calibration table" file dialog to load in the data.    
